@using System.ComponentModel.DataAnnotations
 @inject IToastService toastService

<div class="card card  bg-light m-1 p-3">
    <EditForm Model="@formData" OnValidSubmit="@HandleValidSubmit">
        <div class="row">
            <div class="col">
                @if (DoorsList != null)
                {
                    <select id="SelectedDoorId"
                            @onchange="HandleDoorChange" class="form-control">
                        <option value="">Select Door</option>
                        @foreach (var doorentry in DoorsList)
                        {
                            <option value="@doorentry.Identifier">@doorentry.Name</option>
                        }
                    </select>
                }
            </div>
            <div class="col">
                <div class="form-check form-switch">
                    <input id="StateOpened" class="form-check-input" type="checkbox" @bind="@formData.StateOpened" />
                    <label for="StateOpened">Open/Closed State</label>
                </div>
            </div>
            <div class="col">
                <div class="form-check form-switch">
                    <input class="form-check-input" id="StateLocked" type="checkbox" @bind="@formData.StateLocked" />
                    <label for="StateLocked">Locked/Unlocked State</label>
                </div>
            </div>
            <div class="col">
                <div class="form-check form-switch">
                    <label for="StateAlarmed">Active/Alarmed State</label>
                    <input id="StateAlarmed" class="form-check-input" type="checkbox" @bind="@formData.StateActive" />
                </div>
            </div>
            <div class="col">
                <button type="submit" class="btn btn-primary m-2">Update</button>
            </div>
        </div>
        <div class="@GetDoorStyleClass()">
            <div class="row">
                <div class="col">
                    <h6>@($"{formData.SelectedDoorName}")</h6>
                </div>
                <div class="col">
                    <h6>@($"State: {(formData.StateOpened ? "OPEN" : "CLOSED")}")</h6>
                </div>
                <div class="col">
                    <h6>@($"State: {(formData.StateLocked ? "Locked" : "Unlocked")}")</h6>
                </div>
                <div class="col">
                    <h6>@($"State: {(formData.StateActive ? "Active" : "Alarmed")}")</h6>
                </div>
                <div class="col">
                </div>
            </div>
        </div>
    </EditForm>
</div>



@code {
    [Parameter]
    public List<Door> DoorsList { get; set; } = new List<Door>();

    [Parameter]
    public EventCallback<Door> OnDoorStateChanged { get; set; }

    DoorStateFormModel formData { get; set; } = new DoorStateFormModel { StateActive = true, StateLocked=true, StateOpened=true };

    //object to hold the currently selected door!
    Door selectedDoor = null;
      
    /// <summary>
    /// Form Submission Handler
    /// </summary>
    /// <returns></returns>
    private async Task HandleValidSubmit()
    {
        if (formData.SelectedDoorId == null)
        {
            toastService.ShowWarning($"Please select a door first!");
            return;
        }


        //prepare dor object model based on form inputs!
        Door doorModel = new Door
        {
            Identifier = selectedDoor.Identifier,
            Name = selectedDoor.Name,
            Description = selectedDoor.Description,
            StateActive = formData.StateActive ? DoorStateActive.Active : DoorStateActive.Alarmed,
            StateLocked = formData.StateLocked ? DoorStateLocked.Locked : DoorStateLocked.UnLocked,
            StateOpen = formData.StateOpened ? DoorStateOpen.Open : DoorStateOpen.Closed
        };

        //reset form input model!
        formData = new DoorStateFormModel { StateActive = true, StateLocked = true, StateOpened = true };

        //pass the changed state of door to parent container!
        await OnDoorStateChanged.InvokeAsync(doorModel);

        toastService.ShowSuccess($"State of {formData.SelectedDoorName} is updated!");
    }


    /// <summary>
    /// Selection of door Changed Event Handler!
    /// </summary>
    /// <param name="e"></param>

    private void HandleDoorChange(ChangeEventArgs e)
    {
        if (e.Value != null && Guid.TryParse(e.Value.ToString(), out Guid doorID))
        { 
            //get the door object based on selected id!
            selectedDoor = DoorsList.FirstOrDefault(x => x.Identifier == doorID);

            //prepare form model
            formData = new DoorStateFormModel
            {
                SelectedDoorId = (Guid)doorID,
                SelectedDoorName = selectedDoor.Name,
                StateActive = selectedDoor.StateActive == DoorStateActive.Active ? true : false,
                StateLocked = selectedDoor.StateLocked == DoorStateLocked.Locked ? true : false,
                StateOpened = selectedDoor.StateOpen == DoorStateOpen.Open ? true : false
            };

        }
        else
        {
            formData.SelectedDoorId = null;
            toastService.ShowWarning($"Please select a valid door instace.");
        }

    }

    /// <summary>
    /// Helper method to set the class of the door instance.
    /// Showing a warning background if the StateActive is set as False ie [Alarmed]!
    /// </summary>
    /// <returns></returns>
    string GetDoorStyleClass()
    {
        return !formData.StateActive ? "card text-dark bg-warning mb-1 p-2" : "border-success card text-info mb-1 p-2";
    }



}
